import { renderPrompt } from "../../core/Prompt";

export interface PromptContext {
  input_schema: unknown;
  output_schema: unknown;
  initial_analysis: string;
  data_exploration: string;
  ideas: string;
  reasoning: string;
  planning: string;
  boilerplate: string;
}

const rawPrompt = `
You are an expert TypeScript developer specializing in data visualization. Your task is to create a function that transforms input data into a format suitable for visualization based on given schemas and a thinking process for visual planning.

First, review the following input schema, output schema:

<input_schema>
{{input_schema}}
</input_schema>

<output_schema>
{{output_schema}}
</output_schema>

Now, you will be given thinking process for visual planning:

<initial_analysis>
{{initial_analysis}}
</initial_analysis>

<data_exploration>
{{data_exploration}}
</data_exploration>

<ideas>
{{ideas}}
</ideas>

<reasoning>
{{reasoning}}
</reasoning>

<planning>
{{planning}}
</planning>

Before writing the function, analyze the entire process in detail. Use the following steps to guide your reasoning:

1. Analyze the input schema and identify key data structures.
2. Examine the output schema and determine the required transformations.
3. Study the thinking process for visual planning and break down the visualization requirements.
4. Plan the data transformation process, including any necessary aggregations, filtering, or calculations.
5. Consider potential edge cases and how to handle them.
6. Outline the main steps the function will need to perform.
7. Explicitly map input data structures to output data structures.
8. Consider performance optimizations for the transformation process.
9. Write down key TypeScript types and interfaces you will need to use.

Wrap your reasoning in <transformation_analysis> tags. Be thorough and detailed in your step-by-step analysis. Include the following:

- List out the input and output data structures explicitly.
- Identify any potential data type conversions or calculations needed.
- Provide a high-level pseudocode outline of the function.
- Consider and list potential error scenarios and how to handle them.
- Map each input data structure to its corresponding output data structure.
- Note any performance considerations or optimizations.
- Write down the key TypeScript types and interfaces you'll be working with.

After completing your analysis, implement a TypeScript function named "visualizeData" that accomplishes the following:
a. Accepts input data of type IAutoViewTransformerInputType
b. Transforms the input data according to the component plan
c. Produces output data of type IAutoViewComponentProps

Ensure that your function:
- Uses the provided types IAutoViewTransformerInputType and IAutoViewComponentProps (do not define these types yourself)
- Implements all necessary data transformations
- Handles potential edge cases and invalid input gracefully
- But do not validate the input data, as the compiler will generate validation code for you
- Includes comments explaining complex logic or non-obvious transformations
- Your code is for production use, so you NEVER use any mock-ups, placeholders, or any hard-coded fake data
- You are NOT generating the code for React; you are generating a TypeScript function that just transforms the input data into the output data

Provide your TypeScript function inside <typescript_function> tags. The function should have the following signature:

function visualizeData(input: IAutoViewTransformerInputType): IAutoViewComponentProps

Remember to adhere strictly to the input schema, output schema, and component plan provided. Do not introduce any additional functionality or data structures that are not specified in these inputs.

Note that your code will be attached to the following boilerplate code, generated by the compiler:

<boilerplate>
{{boilerplate}}
</boilerplate>

You should access all the AutoView interfaces and types by prefixing \`IAutoView.\` to the type name, as they are inside the namespace \`IAutoView\`.
But the type names are still prefixed with \`IAutoView.\`. For example, \`IAutoView.IAutoViewComponentProps\` is the type of the component props.

Sub-types and components of the \`IAutoViewTransformerInputType\` (input) type is prefixed with \`Schema.\`. Prefix them if you need to explicitly mention them in your code. For example:
- \`Schema.user_data\`
- \`Schema.ServerResponse.StatusCode\`
Note that the \`IAutoViewTransformerInputType\` itself should not be prefixed with \`Schema.\`.

Do not copy-paste and/or repeat the boilerplate code in your response. They will be attached automatically by the compiler.

Your response should follow this structure:

<transformation_analysis>
[Your detailed analysis here]
</transformation_analysis>

<typescript_function>
[Your TypeScript function here]
</typescript_function>

Begin your response with the analysis process as instructed.
`;

export function prompt(context: PromptContext): string {
  return renderPrompt(rawPrompt, context);
}
