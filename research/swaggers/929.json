{
  "schema": {
    "$ref": "#/$defs/IApiUserCodespaces.GetResponse"
  },
  "$defs": {
    "IApiUserCodespaces.GetResponse": {
      "type": "object",
      "required": [
        "total_count",
        "codespaces"
      ],
      "properties": {
        "total_count": {
          "type": "integer"
        },
        "codespaces": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/codespace"
          }
        }
      }
    },
    "codespace": {
      "title": "Codespace",
      "description": "A codespace.",
      "type": "object",
      "properties": {
        "id": {
          "example": 1,
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "Automatically generated name of this codespace.",
          "example": "monalisa-octocat-hello-world-g4wpq6h95q",
          "type": "string"
        },
        "display_name": {
          "description": "Display name for this codespace.",
          "example": "bookish space pancake",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "environment_id": {
          "description": "UUID identifying this codespace's environment.",
          "example": "26a7c758-7299-4a73-b978-5a92a7ae98a0",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "owner": {
          "$ref": "#/$defs/simple-user"
        },
        "billable_owner": {
          "$ref": "#/$defs/simple-user"
        },
        "repository": {
          "$ref": "#/$defs/minimal-repository"
        },
        "machine": {
          "$ref": "#/$defs/nullable-codespace-machine"
        },
        "devcontainer_path": {
          "description": "Path to devcontainer.json from repo root used to create Codespace.",
          "example": ".devcontainer/example/devcontainer.json",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "prebuild": {
          "description": "Whether the codespace was created from a prebuild.",
          "example": false,
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "created_at": {
          "example": "2011-01-26T19:01:12Z",
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "example": "2011-01-26T19:01:12Z",
          "type": "string",
          "format": "date-time"
        },
        "last_used_at": {
          "description": "Last known time this codespace was started.",
          "example": "2011-01-26T19:01:12Z",
          "type": "string",
          "format": "date-time"
        },
        "state": {
          "description": "State of this codespace.",
          "example": "Available",
          "oneOf": [
            {
              "const": "Unknown"
            },
            {
              "const": "Created"
            },
            {
              "const": "Queued"
            },
            {
              "const": "Provisioning"
            },
            {
              "const": "Available"
            },
            {
              "const": "Awaiting"
            },
            {
              "const": "Unavailable"
            },
            {
              "const": "Deleted"
            },
            {
              "const": "Moved"
            },
            {
              "const": "Shutdown"
            },
            {
              "const": "Archived"
            },
            {
              "const": "Starting"
            },
            {
              "const": "ShuttingDown"
            },
            {
              "const": "Failed"
            },
            {
              "const": "Exporting"
            },
            {
              "const": "Updating"
            },
            {
              "const": "Rebuilding"
            }
          ]
        },
        "url": {
          "description": "API URL for this codespace.",
          "type": "string",
          "format": "uri"
        },
        "git_status": {
          "description": "Details about the codespace's git repository.",
          "type": "object",
          "properties": {
            "ahead": {
              "description": "The number of commits the local repository is ahead of the remote.",
              "example": 0,
              "type": "integer"
            },
            "behind": {
              "description": "The number of commits the local repository is behind the remote.",
              "example": 0,
              "type": "integer"
            },
            "has_unpushed_changes": {
              "description": "Whether the local repository has unpushed changes.",
              "type": "boolean"
            },
            "has_uncommitted_changes": {
              "description": "Whether the local repository has uncommitted changes.",
              "type": "boolean"
            },
            "ref": {
              "description": "The current branch (or SHA if in detached HEAD state) of the local repository.",
              "example": "main",
              "type": "string"
            }
          },
          "required": []
        },
        "location": {
          "description": "The initally assigned location of a new codespace.",
          "example": "WestUs2",
          "oneOf": [
            {
              "const": "EastUs"
            },
            {
              "const": "SouthEastAsia"
            },
            {
              "const": "WestEurope"
            },
            {
              "const": "WestUs2"
            }
          ]
        },
        "idle_timeout_minutes": {
          "description": "The number of minutes of inactivity after which this codespace will be automatically stopped.",
          "example": 60,
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "web_url": {
          "description": "URL to access this codespace on the web.",
          "type": "string",
          "format": "uri"
        },
        "machines_url": {
          "description": "API URL to access available alternate machine types for this codespace.",
          "type": "string",
          "format": "uri"
        },
        "start_url": {
          "description": "API URL to start this codespace.",
          "type": "string",
          "format": "uri"
        },
        "stop_url": {
          "description": "API URL to stop this codespace.",
          "type": "string",
          "format": "uri"
        },
        "publish_url": {
          "description": "API URL to publish this codespace to a new repository.",
          "oneOf": [
            {
              "type": "string",
              "format": "uri"
            },
            {
              "type": "null"
            }
          ]
        },
        "pulls_url": {
          "description": "API URL for the Pull Request associated with this codespace, if any.",
          "oneOf": [
            {
              "type": "string",
              "format": "uri"
            },
            {
              "type": "null"
            }
          ]
        },
        "recent_folders": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "runtime_constraints": {
          "type": "object",
          "properties": {
            "allowed_port_privacy_settings": {
              "description": "The privacy settings a user can select from when forwarding a port.",
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "required": []
        },
        "pending_operation": {
          "description": "Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "pending_operation_disabled_reason": {
          "description": "Text to show user when codespace is disabled by a pending operation",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "idle_timeout_notice": {
          "description": "Text to show user when codespace idle timeout minutes has been overriden by an organization policy",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "retention_period_minutes": {
          "description": "Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).",
          "example": 60,
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ]
        },
        "retention_expires_at": {
          "description": "When a codespace will be auto-deleted based on the \"retention_period_minutes\" and \"last_used_at\"",
          "example": "2011-01-26T20:01:12Z",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "last_known_stop_notice": {
          "description": "The text to display to a user when a codespace has been stopped for a potentially actionable reason.",
          "example": "you've used 100% of your spending limit for Codespaces",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "required": [
        "id",
        "name",
        "environment_id",
        "owner",
        "billable_owner",
        "repository",
        "machine",
        "prebuild",
        "created_at",
        "updated_at",
        "last_used_at",
        "state",
        "url",
        "git_status",
        "location",
        "idle_timeout_minutes",
        "web_url",
        "machines_url",
        "start_url",
        "stop_url",
        "pulls_url",
        "recent_folders"
      ]
    },
    "simple-user": {
      "title": "Simple User",
      "description": "A GitHub user.",
      "type": "object",
      "properties": {
        "name": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "email": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "login": {
          "example": "octocat",
          "type": "string"
        },
        "id": {
          "example": 1,
          "type": "integer",
          "format": "int64"
        },
        "node_id": {
          "example": "MDQ6VXNlcjE=",
          "type": "string"
        },
        "avatar_url": {
          "example": "https://github.com/images/error/octocat_happy.gif",
          "type": "string",
          "format": "uri"
        },
        "gravatar_id": {
          "example": "41d064eb2195891e12d0413f63227ea7",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "url": {
          "example": "https://api.github.com/users/octocat",
          "type": "string",
          "format": "uri"
        },
        "html_url": {
          "example": "https://github.com/octocat",
          "type": "string",
          "format": "uri"
        },
        "followers_url": {
          "example": "https://api.github.com/users/octocat/followers",
          "type": "string",
          "format": "uri"
        },
        "following_url": {
          "example": "https://api.github.com/users/octocat/following{/other_user}",
          "type": "string"
        },
        "gists_url": {
          "example": "https://api.github.com/users/octocat/gists{/gist_id}",
          "type": "string"
        },
        "starred_url": {
          "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
          "type": "string"
        },
        "subscriptions_url": {
          "example": "https://api.github.com/users/octocat/subscriptions",
          "type": "string",
          "format": "uri"
        },
        "organizations_url": {
          "example": "https://api.github.com/users/octocat/orgs",
          "type": "string",
          "format": "uri"
        },
        "repos_url": {
          "example": "https://api.github.com/users/octocat/repos",
          "type": "string",
          "format": "uri"
        },
        "events_url": {
          "example": "https://api.github.com/users/octocat/events{/privacy}",
          "type": "string"
        },
        "received_events_url": {
          "example": "https://api.github.com/users/octocat/received_events",
          "type": "string",
          "format": "uri"
        },
        "type": {
          "example": "User",
          "type": "string"
        },
        "site_admin": {
          "type": "boolean"
        },
        "starred_at": {
          "example": "\"2020-07-09T00:17:55Z\"",
          "type": "string"
        },
        "user_view_type": {
          "example": "public",
          "type": "string"
        }
      },
      "required": [
        "avatar_url",
        "events_url",
        "followers_url",
        "following_url",
        "gists_url",
        "gravatar_id",
        "html_url",
        "id",
        "node_id",
        "login",
        "organizations_url",
        "received_events_url",
        "repos_url",
        "site_admin",
        "starred_url",
        "subscriptions_url",
        "type",
        "url"
      ]
    },
    "minimal-repository": {
      "title": "Minimal Repository",
      "description": "Minimal Repository",
      "type": "object",
      "properties": {
        "id": {
          "example": 1296269,
          "type": "integer",
          "format": "int64"
        },
        "node_id": {
          "example": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "type": "string"
        },
        "name": {
          "example": "Hello-World",
          "type": "string"
        },
        "full_name": {
          "example": "octocat/Hello-World",
          "type": "string"
        },
        "owner": {
          "$ref": "#/$defs/simple-user"
        },
        "private": {
          "type": "boolean"
        },
        "html_url": {
          "example": "https://github.com/octocat/Hello-World",
          "type": "string",
          "format": "uri"
        },
        "description": {
          "example": "This your first repo!",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "fork": {
          "type": "boolean"
        },
        "url": {
          "example": "https://api.github.com/repos/octocat/Hello-World",
          "type": "string",
          "format": "uri"
        },
        "archive_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
          "type": "string"
        },
        "assignees_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
          "type": "string"
        },
        "blobs_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
          "type": "string"
        },
        "branches_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
          "type": "string"
        },
        "collaborators_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
          "type": "string"
        },
        "comments_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
          "type": "string"
        },
        "commits_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
          "type": "string"
        },
        "compare_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
          "type": "string"
        },
        "contents_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
          "type": "string"
        },
        "contributors_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/contributors",
          "type": "string",
          "format": "uri"
        },
        "deployments_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/deployments",
          "type": "string",
          "format": "uri"
        },
        "downloads_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/downloads",
          "type": "string",
          "format": "uri"
        },
        "events_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/events",
          "type": "string",
          "format": "uri"
        },
        "forks_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/forks",
          "type": "string",
          "format": "uri"
        },
        "git_commits_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
          "type": "string"
        },
        "git_refs_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
          "type": "string"
        },
        "git_tags_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
          "type": "string"
        },
        "git_url": {
          "type": "string"
        },
        "issue_comment_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
          "type": "string"
        },
        "issue_events_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
          "type": "string"
        },
        "issues_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
          "type": "string"
        },
        "keys_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
          "type": "string"
        },
        "labels_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
          "type": "string"
        },
        "languages_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/languages",
          "type": "string",
          "format": "uri"
        },
        "merges_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/merges",
          "type": "string",
          "format": "uri"
        },
        "milestones_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
          "type": "string"
        },
        "notifications_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
          "type": "string"
        },
        "pulls_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
          "type": "string"
        },
        "releases_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
          "type": "string"
        },
        "ssh_url": {
          "type": "string"
        },
        "stargazers_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/stargazers",
          "type": "string",
          "format": "uri"
        },
        "statuses_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
          "type": "string"
        },
        "subscribers_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/subscribers",
          "type": "string",
          "format": "uri"
        },
        "subscription_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/subscription",
          "type": "string",
          "format": "uri"
        },
        "tags_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/tags",
          "type": "string",
          "format": "uri"
        },
        "teams_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/teams",
          "type": "string",
          "format": "uri"
        },
        "trees_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
          "type": "string"
        },
        "clone_url": {
          "type": "string"
        },
        "mirror_url": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "hooks_url": {
          "example": "http://api.github.com/repos/octocat/Hello-World/hooks",
          "type": "string",
          "format": "uri"
        },
        "svn_url": {
          "type": "string"
        },
        "homepage": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "language": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "forks_count": {
          "type": "integer"
        },
        "stargazers_count": {
          "type": "integer"
        },
        "watchers_count": {
          "type": "integer"
        },
        "size": {
          "description": "The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.",
          "type": "integer"
        },
        "default_branch": {
          "type": "string"
        },
        "open_issues_count": {
          "type": "integer"
        },
        "is_template": {
          "type": "boolean"
        },
        "topics": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "has_issues": {
          "type": "boolean"
        },
        "has_projects": {
          "type": "boolean"
        },
        "has_wiki": {
          "type": "boolean"
        },
        "has_pages": {
          "type": "boolean"
        },
        "has_downloads": {
          "type": "boolean"
        },
        "has_discussions": {
          "type": "boolean"
        },
        "archived": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "visibility": {
          "type": "string"
        },
        "pushed_at": {
          "example": "2011-01-26T19:06:43Z",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "created_at": {
          "example": "2011-01-26T19:01:12Z",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "updated_at": {
          "example": "2011-01-26T19:14:43Z",
          "oneOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ]
        },
        "permissions": {
          "type": "object",
          "properties": {
            "admin": {
              "type": "boolean"
            },
            "maintain": {
              "type": "boolean"
            },
            "push": {
              "type": "boolean"
            },
            "triage": {
              "type": "boolean"
            },
            "pull": {
              "type": "boolean"
            }
          },
          "required": []
        },
        "role_name": {
          "example": "admin",
          "type": "string"
        },
        "temp_clone_token": {
          "type": "string"
        },
        "delete_branch_on_merge": {
          "type": "boolean"
        },
        "subscribers_count": {
          "type": "integer"
        },
        "network_count": {
          "type": "integer"
        },
        "code_of_conduct": {
          "$ref": "#/$defs/code-of-conduct"
        },
        "license": {
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "spdx_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "node_id": {
                  "type": "string"
                }
              },
              "required": []
            },
            {
              "type": "null"
            }
          ]
        },
        "forks": {
          "example": 0,
          "type": "integer"
        },
        "open_issues": {
          "example": 0,
          "type": "integer"
        },
        "watchers": {
          "example": 0,
          "type": "integer"
        },
        "allow_forking": {
          "type": "boolean"
        },
        "web_commit_signoff_required": {
          "example": false,
          "type": "boolean"
        },
        "security_and_analysis": {
          "$ref": "#/$defs/security-and-analysis"
        }
      },
      "required": [
        "archive_url",
        "assignees_url",
        "blobs_url",
        "branches_url",
        "collaborators_url",
        "comments_url",
        "commits_url",
        "compare_url",
        "contents_url",
        "contributors_url",
        "deployments_url",
        "description",
        "downloads_url",
        "events_url",
        "fork",
        "forks_url",
        "full_name",
        "git_commits_url",
        "git_refs_url",
        "git_tags_url",
        "hooks_url",
        "html_url",
        "id",
        "node_id",
        "issue_comment_url",
        "issue_events_url",
        "issues_url",
        "keys_url",
        "labels_url",
        "languages_url",
        "merges_url",
        "milestones_url",
        "name",
        "notifications_url",
        "owner",
        "private",
        "pulls_url",
        "releases_url",
        "stargazers_url",
        "statuses_url",
        "subscribers_url",
        "subscription_url",
        "tags_url",
        "teams_url",
        "trees_url",
        "url"
      ]
    },
    "code-of-conduct": {
      "title": "Code Of Conduct",
      "description": "Code Of Conduct",
      "type": "object",
      "properties": {
        "key": {
          "example": "contributor_covenant",
          "type": "string"
        },
        "name": {
          "example": "Contributor Covenant",
          "type": "string"
        },
        "url": {
          "example": "https://api.github.com/codes_of_conduct/contributor_covenant",
          "type": "string",
          "format": "uri"
        },
        "body": {
          "example": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.4, available at [http://contributor-covenant.org/version/1/4](http://contributor-covenant.org/version/1/4/).\n",
          "type": "string"
        },
        "html_url": {
          "oneOf": [
            {
              "type": "string",
              "format": "uri"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "required": [
        "url",
        "html_url",
        "key",
        "name"
      ]
    },
    "security-and-analysis": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "advanced_security": {
              "type": "object",
              "properties": {
                "status": {
                  "oneOf": [
                    {
                      "const": "enabled"
                    },
                    {
                      "const": "disabled"
                    }
                  ]
                }
              },
              "required": []
            },
            "code_security": {
              "type": "object",
              "properties": {
                "status": {
                  "oneOf": [
                    {
                      "const": "enabled"
                    },
                    {
                      "const": "disabled"
                    }
                  ]
                }
              },
              "required": []
            },
            "dependabot_security_updates": {
              "description": "Enable or disable Dependabot security updates for the repository.",
              "type": "object",
              "properties": {
                "status": {
                  "description": "The enablement status of Dependabot security updates for the repository.",
                  "oneOf": [
                    {
                      "const": "enabled"
                    },
                    {
                      "const": "disabled"
                    }
                  ]
                }
              },
              "required": []
            },
            "secret_scanning": {
              "type": "object",
              "properties": {
                "status": {
                  "oneOf": [
                    {
                      "const": "enabled"
                    },
                    {
                      "const": "disabled"
                    }
                  ]
                }
              },
              "required": []
            },
            "secret_scanning_push_protection": {
              "type": "object",
              "properties": {
                "status": {
                  "oneOf": [
                    {
                      "const": "enabled"
                    },
                    {
                      "const": "disabled"
                    }
                  ]
                }
              },
              "required": []
            },
            "secret_scanning_non_provider_patterns": {
              "type": "object",
              "properties": {
                "status": {
                  "oneOf": [
                    {
                      "const": "enabled"
                    },
                    {
                      "const": "disabled"
                    }
                  ]
                }
              },
              "required": []
            },
            "secret_scanning_ai_detection": {
              "type": "object",
              "properties": {
                "status": {
                  "oneOf": [
                    {
                      "const": "enabled"
                    },
                    {
                      "const": "disabled"
                    }
                  ]
                }
              },
              "required": []
            }
          },
          "required": []
        },
        {
          "type": "null"
        }
      ]
    },
    "nullable-codespace-machine": {
      "title": "Codespace machine",
      "description": "A description of the machine powering a codespace.",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "name": {
              "description": "The name of the machine.",
              "example": "standardLinux",
              "type": "string"
            },
            "display_name": {
              "description": "The display name of the machine includes cores, memory, and storage.",
              "example": "4 cores, 16 GB RAM, 64 GB storage",
              "type": "string"
            },
            "operating_system": {
              "description": "The operating system of the machine.",
              "example": "linux",
              "type": "string"
            },
            "storage_in_bytes": {
              "description": "How much storage is available to the codespace.",
              "example": 68719476736,
              "type": "integer"
            },
            "memory_in_bytes": {
              "description": "How much memory is available to the codespace.",
              "example": 17179869184,
              "type": "integer"
            },
            "cpus": {
              "description": "How many cores are available to the codespace.",
              "example": 4,
              "type": "integer"
            },
            "prebuild_availability": {
              "description": "Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be \"null\" if prebuilds are not supported or prebuild availability could not be determined. Value will be \"none\" if no prebuild is available. Latest values \"ready\" and \"in_progress\" indicate the prebuild availability status.",
              "example": "ready",
              "oneOf": [
                {
                  "const": "none"
                },
                {
                  "const": "ready"
                },
                {
                  "const": "in_progress"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "required": [
            "name",
            "display_name",
            "operating_system",
            "storage_in_bytes",
            "memory_in_bytes",
            "cpus",
            "prebuild_availability"
          ]
        },
        {
          "type": "null"
        }
      ]
    }
  }
}